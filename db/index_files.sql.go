// Code generated by sqlc. DO NOT EDIT.
// source: index_files.sql

package db

import (
	"context"
)

const addIndexFile = `-- name: AddIndexFile :exec
insert into anidb_index_files (hash, source, file_path)
values ($1, $2, $3)
on conflict do nothing
`

type AddIndexFileParams struct {
	Hash     string `json:"hash"`
	Source   int32  `json:"source"`
	FilePath string `json:"file_path"`
}

// Adds new index file with given hash, source and remote path or does nothing if index file already exists.
func (q *Queries) AddIndexFile(ctx context.Context, arg AddIndexFileParams) error {
	_, err := q.db.ExecContext(ctx, addIndexFile, arg.Hash, arg.Source, arg.FilePath)
	return err
}

const countIndexFiles = `-- name: CountIndexFiles :one
select count(*) from anidb_index_files
where hash = $1
`

// Returns number of index files with given hash.
func (q *Queries) CountIndexFiles(ctx context.Context, hash string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countIndexFiles, hash)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const indexFileByHash = `-- name: IndexFileByHash :one
select id, hash, source, file_path, created_at, updated_at from anidb_index_files
where hash = $1
`

// Returns index file record with specified hash.
func (q *Queries) IndexFileByHash(ctx context.Context, hash string) (AnidbIndexFile, error) {
	row := q.db.QueryRowContext(ctx, indexFileByHash, hash)
	var i AnidbIndexFile
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Source,
		&i.FilePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const latestIndexFile = `-- name: LatestIndexFile :one
select id, hash, source, file_path, created_at, updated_at from anidb_index_files
order by created_at desc
limit 1
`

// Returns most recent index file record.
func (q *Queries) LatestIndexFile(ctx context.Context) (AnidbIndexFile, error) {
	row := q.db.QueryRowContext(ctx, latestIndexFile)
	var i AnidbIndexFile
	err := row.Scan(
		&i.ID,
		&i.Hash,
		&i.Source,
		&i.FilePath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
